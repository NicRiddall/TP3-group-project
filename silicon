#include <iostream>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <vector>
#include <fstream>

//c++ program to calculate simple poisson eqn in cylindrical coords

int main()
{
  using namespace std;

  ofstream outf1("silicon.dat");

cout << "Enter the voltage of the plates: "; 
  double v0 = 0;
 cin >> v0;
 
cout << "Enter the length of the plates: "; 
 double l = 0;
 cin >> l;
 
cout << "Enter the distance between the plates: "; 
  double d = 0;
 cin >> d;

 double dx=1.0; //grid spacing
 double dy=1.0; //grid spacing

 double dt=0.1; //iteration step size
 double tmax=10.0; //iteration stop point
 int tstep = tmax/dt; //number of iterations

 int xstep= l/dx;
 int ystep = d/dy;

 double u[xstep+2][ystep+2]; //multidimensional array
 double unew[xstep+2][ystep+2];

 //boundary conditions 

 for (int j=0;j<(xstep+2);j++) {
   for (int k=0; k<(ystep+2);k++){

   if ( k == ystep+1)
     u[j][k] = v0;
   //Linearly decreasing at the sides???? 
   else if (j==0)
     u[j][k]=v0-((double)v0*(ystep -k)/(ystep+1));
 else if (j==xstep+1)
   u[j][k]=v0-((double)v0*(ystep - k)/(ystep+1));
	      else
		u[j][k]=0;
}
  }

 //Loop through iterations
 for (int n=0; n<tstep;n++){

 for (int j=1; j<(xstep+1); j++){
   for (int k=1;k<(ystep+1);k++){

     //Not efficient need a better method
     if (k==1){
       unew[0][k]=0;
       unew[0][0]=0;
       unew[1][k]=0;
       unew[1][0]=0;
       unew[2][k]=0;
       unew[2][0]=0;

       if (j%6==0) {
	 unew[j][k]=0;
       unew[j+1][k]=0;
       unew[j+2][k]=0;
       unew[j][0]=0;
       unew[j+1][0]=0;
       unew[j+2][0]=0;
       }
}
     
     else unew[j][k]=(0.25)*(u[j-1][k] + u[j+1][k] + u[j][k-1] + u[j][k+1]);

	    }
 }

for (int j=1; j<(xstep+1); j++){
   for (int k=1;k<(ystep+1);k++){
 u[j][k]=unew[j][k];

 //Not efficient need a better method
     if (k==1){
       u[0][k]=0;
       u[0][0]=0;
       u[1][k]=0;
       u[1][0]=0;
       u[2][k]=0;
       u[2][0]=0;

       if (j%6==0) {
	 u[j][k]=0;
       u[j+1][k]=0;
       u[j+2][k]=0;
       u[j][0]=0;
       u[j+1][0]=0;
       u[j+2][0]=0;
       }
}
 }
 }
 }
 

  for ( int j = 0; j < xstep+2; j++ ) {
   for ( int k = 0; k < ystep+2; k++ ) {
    
     outf1<< j<<" "<< k<< " "<<u[j][k]<<endl;  
   }
   }

  outf1.close();

  ofstream outf2("siliconvector.dat");

  for ( int j = 1; j < xstep+1; j++ ) {
   for ( int k = 1; k < ystep+1; k++ ) {
    
     outf2<< j<<" "<< k<< " "<<(u[j-1][k]-u[j+1][k])/(2*dx)<<" " << (u[j][k-1]-u[j][k+1])/(2*dy)<<endl;  
   }
   }
  outf2.close();
    return 0;
}

