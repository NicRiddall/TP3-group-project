#include <iostream>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <vector>
#include <fstream>

//c++ program to calculate problem 2

int main()
{
  using namespace std;

  ofstream outf1("sys2.dat");

cout << "Enter the voltage of the plates: "; 
  double v0 = 0;
 cin >> v0;
 
cout << "Enter the distance between the plates: "; 
 double d = 0;
 cin >> d;
 
cout << "Enter the height of the plates: "; 
  double h = 0;
 cin >> h;

cout << "Enter the radius of the inner circle: "; 
  int r = 0;
 cin >> r;

 cout << "Enter the acceptable prescision: ";
 double error =0;
 cin >> error;

 double dx=1.0; //grid spacing
 double dy=1.0; //grid spacing

 //double error = 0.001; //when points stop changing more than this, stop iteration
 int errorcount=0;


 //for set number of iterations
 int tstep = 100; //number of iterations

 int xstep= d/dx;
 int ystep = h/dy;

 double u[xstep+2][ystep+2]; //multidimensional array
 double unew[xstep+2][ystep+2];

 //boundary conditions 

 for (int j=0;j<(xstep+2);j++) {
   for (int k=0; k<(ystep+2);k++){
     if (j==0)
       u[j][k]=v0;
     else if (j==(xstep+1))
	      u[j][k]=-v0;

     else if (k==0 || k == ystep+1)
  {
	//linearly decreasing at top and bottom
   	u[j][k] = v0-((double)2*v0*j/(xstep+1));
  } 
	      else
		u[j][k]=0;
}
  }

 while(errorcount < xstep-1){ 
//while there are points that do not contribute to error count, iterations continue, when all points change less than error, iteration stops
  
   errorcount=0; //reset error count

 for (int j=1; j<(xstep+1); j++){
   for (int k=1;k<(ystep+1);k++){

     //Inner circle zero
     if ((pow((k-0.5*h),2) + pow((j-0.5*d),2))< pow(r,2)) 
       unew[j][k]=0;      
     
     else unew[j][k]=(0.25)*(u[j-1][k] + u[j+1][k] + u[j][k-1] + u[j][k+1]);

	    }
 }

 //section that calculates number of points that have changed by less than (error)
for(int j=0; j<xstep; j++){
 //if point on arbituary line has changed less than error, it gets added to error count
   if ( abs(u[j][ystep/2] - unew[j][ystep/2]) < error)
   errorcount+=1;}


for (int j=1; j<(xstep+1); j++){
   for (int k=1;k<(ystep+1);k++){
 u[j][k]=unew[j][k];
 }
 }
 }
 


  for ( int j = 0; j < xstep+2; j++ ) {
   for ( int k = 0; k < ystep+2; k++ ) {
    
     outf1<< j<<" "<< k<< " "<<u[j][k] <<endl;  
   }
   }
outf1.close();

ofstream outf2("sys2vector.dat");

 for ( int j = 1; j < xstep-1; j++ ) {
   for ( int k = 1; k < ystep-1; k++ ) {
    
     outf2<<j<<" "<<k<<" "<<((u[j-1][k]-u[j+1][k])/(2*dx))<< " " << ((u[j][k-1]-u[j][k+1])/(2*dy))  <<endl;  
   }
   }
 outf2.close();
    return 0;
}
