#include "shapes.h"
#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <algorithm>
#include <tuple>

using namespace std;

// Functions for string manipulation
bool space(char c)
{
	return isspace(c);
}

bool not_space(char c)
{
	return !isspace(c);
}

// Splits a line of integers into a vector of integers
vector<int> split(const string& str)
{
	typedef string::const_iterator iter;
	vector<int> ret;

	iter i = str.begin();
	while (i != str.end()) {
		// ignore leading blanks
		i = find_if(i, str.end(), not_space);

		// find end of next number
		iter j = find_if(i, str.end(), space);

		// copy the characters in [i, j)
		if (i != str.end()){
			ret.push_back(stoi(string(i, j)));
		}
		i = j;
	}
	return ret;
}

int main()
{
	const static int BOARD_WIDTH = 100;
	const static int BOARD_HEIGHT = 100;
	string shapes_file_name;

	cout << "Welcome to the E-Field Solver!" << endl << endl;

	// Allow the user to enter any charged rectangles. Rectangles are stored in an array.
	cout << "Input the name of a text file containing shape data: " << endl;
	cin >> shapes_file_name;

	// Initialise the board - a 2-dimensional array of tuples, with the first entry a double representing the potential at this point, and the second a boolean.
	// The boolean is 0 if this point is part of a charged shape, indicating that its potential is part of the boundary conditions and cannot be changed.
	tuple<double, bool> board[BOARD_WIDTH][BOARD_HEIGHT];
	
	// Set up the boundary conditions on the board according to the instructions provided in the shapes file
	ifstream shapes_file;
	shapes_file.open(shapes_file_name);
	string s;
	// For each rectangle
	while (getline(shapes_file, s)) 
	{
		// Test
		cout << "This rectangle has properties: " << s << endl;
		// Break the line into its constituent ints, representing the properties of the rectangle
		vector<int> properties = split(s);
		vector<int>::const_iterator iter = properties.begin();
		int origin_x = *iter;
		++iter;
		int origin_y = *iter;
		++iter;
		int width = *iter;
		++iter;
		int height = *iter;
		++iter;
		int potential = *iter;

		// Enter the given potential at every point on the board that lies within the rectangle.
		// For each x-coord within the rectangle
		for (int i = origin_x; i < origin_x + width; ++i) {
			// For each y-coord within the rectangle
			for (int j = origin_y; j < origin_y + height; ++j) {
				// Set the potential of this cell.
				get<0>(board[i][j]) = potential;
				// Mark this cell as permanent
				get<1>(board[i][j]) = 1;
			}
		}
	}
	cout << "Board updated" << endl;

	shapes_file.close();

	string ofile_name;
	cout << "Enter the name of the output file:" << endl;
	cin >> ofile_name;
	ofstream ofile;
	ofile.open(ofile_name);
	for (int i = 0; i < BOARD_WIDTH; ++i) {
		for (int j = 0; j < BOARD_HEIGHT; ++j) {
			ofile << i << " " << j << " " << get<0>(board[i][j]) << endl;
		}
		ofile << endl;
	}
	ofile.close();

	return 0;
}

/* Format of shapes file:
	origin_x origin_y width height potential */
